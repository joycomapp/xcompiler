//****************************************************************
//   CPLUS2\PARSER_H.FRM
//   Coco/R C++ Support Frames.
//   Author: Frankie Arzu <farzu@uvg.edu.gt>
//
//   Jun 12, 1996  Version 1.06
//      Many fixes and suggestions thanks to
//      Pat Terry <p.terry@.ru.ac.za>
//   May 05, 1999  Version 1.12
//      Added methods to parser to retrieve token position easily
//****************************************************************

/*************** NOTICE ****************
	This file is generated by cocoR       
***************************************/
#define GENERR(x) GenError(x, __FILE__, __LINE__)

#ifndef cParser_INCLUDE
#define cParser_INCLUDE

#include "clib.h"
#include <string>
#include <vector>
#include "cr_parse.hpp"
#include "../datatype.h"
#include "cr_parse.hpp"
#include "Function.h"
#include "PubFuncTable.h"
#include "ClassDesTable.h"
#include "Configure.h"
#include "cp_util.h"






const int MAXSYM = 6;
const int MAXERROR = 117;

class cParser : public CRRParser
{


  public:
    cParser(CCompiler* c, AbsScanner *S=NULL, CRError *E=NULL);// : CRParser(S,E) {};
    ~cParser();
    void Parse();
    

  protected:
//    static unsigned short int SymSet[][MAXSYM];
    virtual void Get();
    void ExpectWeak (int n, int follow);
    int  WeakSeparator (int n, int syFol, int repFol);

  private:
    static void C(void);
    static void SourceElements(void);
    static void Boolean(void);
    static void PrimaryExpression(void);
    static void ObjectLiteral(void);
    static void Expression(void);
    static void ArrayLiteral(void);
    static void Literal(void);
    static void Elision(void);
    static void ElementList(void);
    static void AssignmentExpression(void);
    static void PropertyNameAndValueList(void);
    static void PropertyNameAndValue(void);
    static void PropertyName(void);
    static void MemberExpression(void);
    static void FunctionExpression(void);
    static void MemberExpressionPart(void);
    static void AllocationExpression(void);
    static void MemberExpressionForIn(void);
    static void Arguments(void);
    static void CallExpression(void);
    static void CallExpressionPart(void);
    static void CallExpressionForIn(void);
    static void ArgumentList(void);
    static void LeftHandSideExpression(void);
    static void LeftHandSideExpressionForIn(void);
    static void PostfixExpression(void);
    static void PostfixOperator(void);
    static void UnaryExpression(void);
    static void UnaryOperator(void);
    static void MultiplicativeExpression(void);
    static void MultiplicativeOperator(void);
    static void AdditiveExpression(void);
    static void AdditiveOperator(void);
    static void ShiftExpression(void);
    static void ShiftOperator(void);
    static void RelationalExpression(void);
    static void RelationalOperator(void);
    static void RelationalExpressionNoIn(void);
    static void RelationalNoInOperator(void);
    static void EqualityExpression(void);
    static void EqualityOperator(void);
    static void EqualityExpressionNoIn(void);
    static void BitwiseANDExpression(void);
    static void BitwiseANDOperator(void);
    static void BitwiseANDExpressionNoIn(void);
    static void BitwiseXORExpression(void);
    static void BitwiseXOROperator(void);
    static void BitwiseXORExpressionNoIn(void);
    static void BitwiseORExpression(void);
    static void BitwiseOROperator(void);
    static void BitwiseORExpressionNoIn(void);
    static void LogicalANDExpression(void);
    static void LogicalANDOperator(void);
    static void LogicalANDExpressionNoIn(void);
    static void LogicalORExpression(void);
    static void LogicalOROperator(void);
    static void LogicalORExpressionNoIn(void);
    static void ConditionalExpression(void);
    static void ConditionalExpressionNoIn(void);
    static void AssignmentExpressionNoIn(void);
    static void AssignmentOperator(void);
    static void ExpressionNoIn(void);
    static void Statement(void);
    static void Block(void);
    static void JScriptVarStatement(void);
    static void VariableStatement(void);
    static void EmptyStatement(void);
    static void LabelledStatement(void);
    static void ExpressionStatement(void);
    static void IfStatement(void);
    static void IterationStatement(void);
    static void ContinueStatement(void);
    static void BreakStatement(void);
    static void ImportStatement(void);
    static void ReturnStatement(void);
    static void WithStatement(void);
    static void SwitchStatement(void);
    static void ThrowStatement(void);
    static void TryStatement(void);
    static void StatementList(void);
    static void VariableDeclarationList(void);
    static void VariableDeclaration(void);
    static void Initialiser(void);
    static void VariableDeclarationNoIn(void);
    static void InitialiserNoIn(void);
    static void CaseBlock(void);
    static void CaseClauses(void);
    static void DefaultClause(void);
    static void CaseClause(void);
    static void Finally(void);
    static void Catch(void);
    static void FunctionDeclaration(void);
    static void FormalParameterList(void);
    static void FunctionBody(void);
    static void SourceElement(void);
    static void Name(void);
    static void JScriptVarDeclarationList(void);
    static void JScriptVarDeclaration(void);
    


//<--
};

#endif /* cParser_INCLUDE */

