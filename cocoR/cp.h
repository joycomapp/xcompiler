//****************************************************************
//   CPLUS2\PARSER_H.FRM
//   Coco/R C++ Support Frames.
//   Author: Frankie Arzu <farzu@uvg.edu.gt>
//
//   Jun 12, 1996  Version 1.06
//      Many fixes and suggestions thanks to
//      Pat Terry <p.terry@.ru.ac.za>
//   May 05, 1999  Version 1.12
//      Added methods to parser to retrieve token position easily
//****************************************************************

/*************** NOTICE ****************
	This file is generated by cocoR       
***************************************/
#define GENERR(x) GenError(x, __FILE__, __LINE__)

#ifndef cParser_INCLUDE
#define cParser_INCLUDE

#include "clib.h"
#include <string>
#include <vector>
#include "cr_parse.hpp"
#include "../datatype.h"
#include "cr_parse.hpp"
#include "Function.h"
#include "PubFuncTable.h"
#include "ClassDesTable.h"
#include "Configure.h"
#include "cp_util.h"






const int MAXSYM = 45;
const int MAXERROR = 1072;

class cParser : public CRRParser
{


  public:
    cParser(CCompiler* c, AbsScanner *S=NULL, CRError *E=NULL);// : CRParser(S,E) {};
    ~cParser();
    void Parse();
    

  protected:
//    static unsigned short int SymSet[][MAXSYM];
    virtual void Get();
    void ExpectWeak (int n, int follow);
    int  WeakSeparator (int n, int syFol, int repFol);

  private:
    static void AllowedKeywordsForTypeName(void);
    static void AllowedKeywordsExclude(void);
    static void AllowedKeywords(void);
    static void TypeName(void);
    static void Var(void);
    static void Expression(void);
    static void Exps(void);
    static void NameInVarDef(void);
    static void Name(void);
    static void NameInPrimary(void);
    static void C(void);
    static void ReportDef(void);
    static void FunctionDef(void);
    static void ClassStatement(void);
    static void stINTERFACE(void);
    static void stTYPE_POOL(void);
    static void stTYPES(void);
    static void VariableDefineStatement(void);
    static void Statement(void);
    static void Type(void);
    static void WriteStatement(void);
    static void AssignmentStatement(void);
    static void ContinueStatement(void);
    static void stDO(void);
    static void ForStatement(void);
    static void IfStatement(void);
    static void NullStatement(void);
    static void ReturnStatement(void);
    static void stWHILE(void);
    static void LoopStatement(void);
    static void CaseStatement(void);
    static void stCALL(void);
    static void MethodStatement(void);
    static void MethodsStatement(void);
    static void MessageStatement(void);
    static void SearchStatement(void);
    static void stAPPEND(void);
    static void stSPLIT(void);
    static void stRAISE(void);
    static void stMOVE(void);
    static void stMOVE_CORRESPONDING(void);
    static void stWITH(void);
    static void stTABLES(void);
    static void stAUTHORITY_CHECK(void);
    static void stDELETE(void);
    static void stEVENTS(void);
    static void stMODIFY(void);
    static void stON(void);
    static void stOPEN(void);
    static void stFETCH(void);
    static void stPROVIDE(void);
    static void stREAD(void);
    static void stSORT(void);
    static void stSUBMIT(void);
    static void stTRY(void);
    static void stADD(void);
    static void stADD_CORRESPONDING(void);
    static void stALIASES(void);
    static void stASSERT(void);
    static void stASSIGN(void);
    static void stAT(void);
    static void stBACK(void);
    static void stBREAK_POINT(void);
    static void stCHECK(void);
    static void stCLASS_EVENTS(void);
    static void stCLASS_POOL(void);
    static void stCLEAR(void);
    static void stCLOSE(void);
    static void stCOLLECT(void);
    static void stCOMMIT(void);
    static void stCOMPUTE(void);
    static void stCONCATENATE(void);
    static void stCONDENSE(void);
    static void stCONTROLS(void);
    static void stCONVERT(void);
    static void stCREATE(void);
    static void stDEMAND(void);
    static void stDESCRIBE(void);
    static void stDETAIL(void);
    static void stDIVIDE(void);
    static void stDIVIDE_CORRESPONDING(void);
    static void stEDITOR_CALL(void);
    static void stEND_OF_PAGE(void);
    static void stEND_OF_SELECTION(void);
    static void stEXIT(void);
    static void stEXPORT(void);
    static void stEXTRACT(void);
    static void stFIELD_GROUPS(void);
    static void stFIELD_SYMBOLS(void);
    static void stFIELDS(void);
    static void stFIND(void);
    static void stFORMAT(void);
    static void stFREE(void);
    static void stFUNCTION_POOL(void);
    static void stGENERATE(void);
    static void stGET(void);
    static void stHIDE(void);
    static void stIMPORT(void);
    static void stINCLUDE(void);
    static void stINFOTYPES(void);
    static void stINITIALIZATION(void);
    static void stINPUT(void);
    static void stINSERT(void);
    static void stINTERFACE_POOL(void);
    static void stINTERFACES(void);
    static void stLEAVE(void);
    static void stLOAD_OF_PROGRAM(void);
    static void stLOCAL(void);
    static void stLOG_POINT(void);
    static void stMAXIMUM(void);
    static void stMINIMUM(void);
    static void stMODULE(void);
    static void stMULTIPLY(void);
    static void stMULTIPLY_CORRESPONDING(void);
    static void stNEW_LINE(void);
    static void stNEW_PAGE(void);
    static void stNEW_SECTION(void);
    static void stNODES(void);
    static void stOVERLAY(void);
    static void stPACK(void);
    static void stPARAMETERS(void);
    static void stPERFORM(void);
    static void stPOSITION(void);
    static void stPRINT_CONTROL(void);
    static void stPROGRAM(void);
    static void stRANGES(void);
    static void stRECEIVE(void);
    static void stREFRESH(void);
    static void stREJECT(void);
    static void stREPLACE(void);
    static void stRESERVE(void);
    static void stRESUME(void);
    static void stRETRY(void);
    static void stRETURN(void);
    static void stROLLBACK(void);
    static void stSCROLL(void);
    static void stSELECT_OPTIONS(void);
    static void stSELECTION_SCREEN(void);
    static void stSET(void);
    static void stSHIFT(void);
    static void stSKIP(void);
    static void stSTOP(void);
    static void stSUBTRACT(void);
    static void stSUBTRACT_CORRESPONDING(void);
    static void stSUM(void);
    static void stSUMMARY(void);
    static void stSUMMING(void);
    static void stSUPPLY(void);
    static void stSUPPRESS(void);
    static void stSYNTAX_CHECK(void);
    static void stTEST_INJECTION(void);
    static void stTEST_SEAM(void);
    static void stTOP_OF_PAGE(void);
    static void stTRANSFER(void);
    static void stTRANSLATE(void);
    static void stTRUNCATE(void);
    static void stTYPE_POOLS(void);
    static void stULINE(void);
    static void stUNASSIGN(void);
    static void stUNPACK(void);
    static void stUPDATE(void);
    static void stWAIT(void);
    static void stWINDOW(void);
    static void stSELECT(void);
    static void stENDSELECT(void);
    static void sqlFields(void);
    static void sqlColumn(void);
    static void sqlFrom(void);
    static void sqlJoin(void);
    static void sqlOrderBy(void);
    static void sqlInto(void);
    static void SQLCondition(void);
    static void Withline(void);
    static void GroupBy(void);
    static void LogExp(void);
    static void TypeDes(void);
    static void LikeDes(void);
    static void Format_options(void);
    static void Statements(void);
    static void AUTHORITY_CHECK_ITEM(void);
    static void VARYING(void);
    static void Event_exp_item(void);
    static void Typing(void);
    static void Event_options(void);
    static void ProvideFields(void);
    static void Association(void);
    static void Types_mesh_stmt(void);
    static void CallFunction(void);
    static void CallBadi(void);
    static void CallDialog(void);
    static void CallCustomerFunction(void);
    static void CallDatabaseProcedure(void);
    static void CallMethod(void);
    static void CallScreen(void);
    static void CallSelectionScreen(void);
    static void CallTransation(void);
    static void CallTransformation(void);
    static void MethodName(void);
    static void ShiftExp(void);
    static void Conditional(void);
    static void AssignmentOperator(void);
    static void LogORExp(void);
    static void LogANDExp(void);
    static void LogNOTExp(void);
    static void InclORExp(void);
    static void ExclORExp(void);
    static void ANDExp(void);
    static void EqualExp(void);
    static void RelationExp(void);
    static void PredefinedConstant(void);
    static void AddExp(void);
    static void MultExp(void);
    static void CastExp(void);
    static void UnaryExp(void);
    static void PostFixExp(void);
    static void UnaryOperator(void);
    static void PostFix(A* r);
    static void FunctionCall(A *name);
    static void Primary(void);
    static void Creator(void);
    static void LogLogANDExp(void);
    static void LogLogNOTExp(void);
    static void LogInclORExp(void);
    static void LogExclORExp(void);
    static void LogANDExp2(void);
    static void LogEqualExp(void);
    static void LogRelationExp(void);
    static void LogShiftExp(void);
    static void LogAddExp(void);
    static void LogMultExp(void);
    static void LogCastExp(void);
    static void LogUnaryExp(void);
    static void LogPostFixExp(void);
    static void LogPrimary(void);
    


//<--
};

#endif /* cParser_INCLUDE */

