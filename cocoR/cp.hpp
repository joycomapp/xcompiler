//****************************************************************
//   CPLUS2\PARSER_H.FRM
//   Coco/R C++ Support Frames.
//   Author: Frankie Arzu <farzu@uvg.edu.gt>
//
//   Jun 12, 1996  Version 1.06
//      Many fixes and suggestions thanks to
//      Pat Terry <p.terry@.ru.ac.za>
//   May 05, 1999  Version 1.12
//      Added methods to parser to retrieve token position easily
//****************************************************************

/*************** NOTICE ****************
	This file is generated by cocoR       
***************************************/
#define GENERR(x) GenError(x, __FILE__, __LINE__)

#ifndef cParser_INCLUDE
#define cParser_INCLUDE

#include "clib.h"
#include <string>
#include <vector>
#include "cr_parse.hpp"
#include "../datatype.h"
#include "cr_parse.hpp"
#include "Function.h"
#include "PubFuncTable.h"
#include "ClassDesTable.h"
#include "Configure.h"
#include "cp_util.h"






const int MAXSYM = 6;
const int MAXERROR = 119;

class cParser : public CRRParser
{


  public:
    cParser(CCompiler* c, AbsScanner *S=NULL, CRError *E=NULL);// : CRParser(S,E) {};
    ~cParser();
    void Parse();
    

  protected:
//    static unsigned short int SymSet[][MAXSYM];
    virtual void Get();
    void ExpectWeak (int n, int follow);
    int  WeakSeparator (int n, int syFol, int repFol);

  private:
    void C();
    void SourceElements();
    void Boolean();
    void PrimaryExpression();
    void ObjectLiteral();
    void Expression();
    void ArrayLiteral();
    void Literal();
    void Elision();
    void ElementList();
    void AssignmentExpression();
    void PropertyNameAndValueList();
    void PropertyNameAndValue();
    void PropertyName();
    void MemberExpression();
    void FunctionExpression();
    void MemberExpressionPart();
    void AllocationExpression();
    void MemberExpressionForIn();
    void Arguments();
    void CallExpression();
    void CallExpressionPart();
    void CallExpressionForIn();
    void ArgumentList();
    void LeftHandSideExpression();
    void LeftHandSideExpressionForIn();
    void PostfixExpression();
    void PostfixOperator();
    void UnaryExpression();
    void UnaryOperator();
    void MultiplicativeExpression();
    void MultiplicativeOperator();
    void AdditiveExpression();
    void AdditiveOperator();
    void ShiftExpression();
    void ShiftOperator();
    void RelationalExpression();
    void RelationalOperator();
    void RelationalExpressionNoIn();
    void RelationalNoInOperator();
    void EqualityExpression();
    void EqualityOperator();
    void EqualityExpressionNoIn();
    void BitwiseANDExpression();
    void BitwiseANDOperator();
    void BitwiseANDExpressionNoIn();
    void BitwiseXORExpression();
    void BitwiseXOROperator();
    void BitwiseXORExpressionNoIn();
    void BitwiseORExpression();
    void BitwiseOROperator();
    void BitwiseORExpressionNoIn();
    void LogicalANDExpression();
    void LogicalANDOperator();
    void LogicalANDExpressionNoIn();
    void LogicalORExpression();
    void LogicalOROperator();
    void LogicalORExpressionNoIn();
    void ConditionalExpression();
    void ConditionalExpressionNoIn();
    void AssignmentExpressionNoIn();
    void AssignmentOperator();
    void ExpressionNoIn();
    void Statement();
    void Block();
    void VariableStatement();
    void EmptyStatement();
    void LabelledStatement();
    void ExpressionStatement();
    void IfStatement();
    void IterationStatement();
    void ContinueStatement();
    void BreakStatement();
    void ImportStatement();
    void ReturnStatement();
    void WithStatement();
    void SwitchStatement();
    void ThrowStatement();
    void TryStatement();
    void StatementList();
    void VariableDeclarationList();
    void VariableDeclaration();
    void Initialiser();
    void VariableDeclarationNoIn();
    void InitialiserNoIn();
    void ForSt();
    void CaseBlock();
    void CaseClauses();
    void DefaultClause();
    void CaseClause();
    void Finally();
    void Catch();
    void FunctionDeclaration();
    void FormalParameterList();
    void FunctionBody();
    void SourceElement();
    void Name();
    


//<--
};

#endif /* cParser_INCLUDE */

