//****************************************************************
//   CPLUS2\PARSER_H.FRM
//   Coco/R C++ Support Frames.
//   Author: Frankie Arzu <farzu@uvg.edu.gt>
//
//   Jun 12, 1996  Version 1.06
//      Many fixes and suggestions thanks to
//      Pat Terry <p.terry@.ru.ac.za>
//   May 05, 1999  Version 1.12
//      Added methods to parser to retrieve token position easily
//****************************************************************

/*************** NOTICE ****************
	This file is generated by cocoR       
***************************************/
#define GENERR(x) GenError(x, __FILE__, __LINE__)

#ifndef cParser_INCLUDE
#define cParser_INCLUDE

#include "clib.h"
#include <string>
#include <vector>
#include "cr_parse.hpp"
#include "../datatype.h"
#include "cr_parse.hpp"
#include "Function.h"
#include "PubFuncTable.h"
#include "ClassDesTable.h"
#include "Configure.h"
#include "cp_util.h"






const int MAXSYM = 45;
const int MAXERROR = 1072;

class cParser : public CRRParser
{


  public:
    cParser(CCompiler* c, AbsScanner *S=NULL, CRError *E=NULL);// : CRParser(S,E) {};
    ~cParser();
    void Parse();
    

  protected:
//    static unsigned short int SymSet[][MAXSYM];
    virtual void Get();
    void ExpectWeak (int n, int follow);
    int  WeakSeparator (int n, int syFol, int repFol);

  private:
    void AllowedKeywordsForTypeName();
    void AllowedKeywordsExclude();
    void AllowedKeywords();
    void TypeName();
    void Var();
    void Expression();
    void Exps();
    void NameInVarDef();
    void Name();
    void NameInPrimary();
    void C();
    void ReportDef();
    void FunctionDef();
    void ClassStatement();
    void stINTERFACE();
    void stTYPE_POOL();
    void stTYPES();
    void VariableDefineStatement();
    void Statement();
    void Type();
    void WriteStatement();
    void AssignmentStatement();
    void ContinueStatement();
    void stDO();
    void ForStatement();
    void IfStatement();
    void NullStatement();
    void ReturnStatement();
    void stWHILE();
    void LoopStatement();
    void CaseStatement();
    void stCALL();
    void MethodStatement();
    void MethodsStatement();
    void MessageStatement();
    void SearchStatement();
    void stAPPEND();
    void stSPLIT();
    void stRAISE();
    void stMOVE();
    void stMOVE_CORRESPONDING();
    void stWITH();
    void stTABLES();
    void stAUTHORITY_CHECK();
    void stDELETE();
    void stEVENTS();
    void stMODIFY();
    void stON();
    void stOPEN();
    void stFETCH();
    void stPROVIDE();
    void stREAD();
    void stSORT();
    void stSUBMIT();
    void stTRY();
    void stADD();
    void stADD_CORRESPONDING();
    void stALIASES();
    void stASSERT();
    void stASSIGN();
    void stAT();
    void stBACK();
    void stBREAK_POINT();
    void stCHECK();
    void stCLASS_EVENTS();
    void stCLASS_POOL();
    void stCLEAR();
    void stCLOSE();
    void stCOLLECT();
    void stCOMMIT();
    void stCOMPUTE();
    void stCONCATENATE();
    void stCONDENSE();
    void stCONTROLS();
    void stCONVERT();
    void stCREATE();
    void stDEMAND();
    void stDESCRIBE();
    void stDETAIL();
    void stDIVIDE();
    void stDIVIDE_CORRESPONDING();
    void stEDITOR_CALL();
    void stEND_OF_PAGE();
    void stEND_OF_SELECTION();
    void stEXIT();
    void stEXPORT();
    void stEXTRACT();
    void stFIELD_GROUPS();
    void stFIELD_SYMBOLS();
    void stFIELDS();
    void stFIND();
    void stFORMAT();
    void stFREE();
    void stFUNCTION_POOL();
    void stGENERATE();
    void stGET();
    void stHIDE();
    void stIMPORT();
    void stINCLUDE();
    void stINFOTYPES();
    void stINITIALIZATION();
    void stINPUT();
    void stINSERT();
    void stINTERFACE_POOL();
    void stINTERFACES();
    void stLEAVE();
    void stLOAD_OF_PROGRAM();
    void stLOCAL();
    void stLOG_POINT();
    void stMAXIMUM();
    void stMINIMUM();
    void stMODULE();
    void stMULTIPLY();
    void stMULTIPLY_CORRESPONDING();
    void stNEW_LINE();
    void stNEW_PAGE();
    void stNEW_SECTION();
    void stNODES();
    void stOVERLAY();
    void stPACK();
    void stPARAMETERS();
    void stPERFORM();
    void stPOSITION();
    void stPRINT_CONTROL();
    void stPROGRAM();
    void stRANGES();
    void stRECEIVE();
    void stREFRESH();
    void stREJECT();
    void stREPLACE();
    void stRESERVE();
    void stRESUME();
    void stRETRY();
    void stRETURN();
    void stROLLBACK();
    void stSCROLL();
    void stSELECT_OPTIONS();
    void stSELECTION_SCREEN();
    void stSET();
    void stSHIFT();
    void stSKIP();
    void stSTOP();
    void stSUBTRACT();
    void stSUBTRACT_CORRESPONDING();
    void stSUM();
    void stSUMMARY();
    void stSUMMING();
    void stSUPPLY();
    void stSUPPRESS();
    void stSYNTAX_CHECK();
    void stTEST_INJECTION();
    void stTEST_SEAM();
    void stTOP_OF_PAGE();
    void stTRANSFER();
    void stTRANSLATE();
    void stTRUNCATE();
    void stTYPE_POOLS();
    void stULINE();
    void stUNASSIGN();
    void stUNPACK();
    void stUPDATE();
    void stWAIT();
    void stWINDOW();
    void stSELECT();
    void stENDSELECT();
    void sqlFields();
    void sqlColumn();
    void sqlFrom();
    void sqlJoin();
    void sqlOrderBy();
    void sqlInto();
    void SQLCondition();
    void Withline();
    void GroupBy();
    void LogExp();
    void TypeDes();
    void LikeDes();
    void Format_options();
    void Statements();
    void AUTHORITY_CHECK_ITEM();
    void VARYING();
    void Event_exp_item();
    void Typing();
    void Event_options();
    void ProvideFields();
    void Association();
    void Types_mesh_stmt();
    void CallFunction();
    void CallBadi();
    void CallDialog();
    void CallCustomerFunction();
    void CallDatabaseProcedure();
    void CallMethod();
    void CallScreen();
    void CallSelectionScreen();
    void CallTransation();
    void CallTransformation();
    void MethodName();
    void ShiftExp();
    void Conditional();
    void AssignmentOperator();
    void LogORExp();
    void LogANDExp();
    void LogNOTExp();
    void InclORExp();
    void ExclORExp();
    void ANDExp();
    void EqualExp();
    void RelationExp();
    void PredefinedConstant();
    void AddExp();
    void MultExp();
    void CastExp();
    void UnaryExp();
    void PostFixExp();
    void UnaryOperator();
    void PostFix(A* r);
    void FunctionCall(A *name);
    void Primary();
    void Creator();
    void LogLogANDExp();
    void LogLogNOTExp();
    void LogInclORExp();
    void LogExclORExp();
    void LogANDExp2();
    void LogEqualExp();
    void LogRelationExp();
    void LogShiftExp();
    void LogAddExp();
    void LogMultExp();
    void LogCastExp();
    void LogUnaryExp();
    void LogPostFixExp();
    void LogPrimary();
    


//<--
};

#endif /* cParser_INCLUDE */

